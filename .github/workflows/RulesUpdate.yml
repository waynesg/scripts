name: Update OpenClash Rules

on:
  schedule:
    # 定时任务，这里以每天凌晨0点为例
    - cron: '0 0 * * *'
  workflow_dispatch:
    # 允许手动触发
    inputs:
      reason:
        description: 'Reason for manual dispatch'
        required: false
        default: 'Manual update'

jobs:
  update-file:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@main
      
    - name: Fetch Updates for Rules
      run: |
        declare -A files
        files["ai.yaml"]="https://raw.githubusercontent.com/DustinWin/ruleset_geodata/refs/heads/mihomo-ruleset/ai.yaml"
        files["networktest.yaml"]="https://raw.githubusercontent.com/DustinWin/ruleset_geodata/refs/heads/mihomo-ruleset/networktest.yaml"
        files["unbreak-classical.list"]="https://raw.githubusercontent.com/qoli/SyncnextClash/refs/heads/main/passwall/direct_host"
        files["proxy-classical.list"]="https://raw.githubusercontent.com/qoli/SyncnextClash/refs/heads/main/passwall/proxy_host"

        for file in "${!files[@]}"; do
      # 清除目标文件（如果已存在）
          rm -f "rules/$file"

      # 下载文件并保存
          curl -L -o "rules/$file" "${files[$file]}"

      # 检查文件是否成功下载并且非空
          if [[ -s "rules/$file" ]]; then
        # 对于 .yaml 文件进行注释处理
            if [[ "$file" == *.yaml ]]; then
              sed -i "1i#!name = ${file%.yaml}" "rules/$file"
              sed -i "2i#!date = $(date +'%Y-%m-%d %H:%M:%S')" "rules/$file"
              sed -i "3i#!" "rules/$file"
            fi
          else
            echo "Failed to download ${file}. Keeping the existing version."
            rm -f "rules/$file"  # 删除下载失败的文件
          fi
        done

    - name: Commit and push changes
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        git add rules/*.yaml
        if git diff-index --quiet HEAD; then
          echo "No changes to commit"
        else
          git commit -m 'Update Rules files'
          git push
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
